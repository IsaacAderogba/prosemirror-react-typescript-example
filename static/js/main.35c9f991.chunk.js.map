{"version":3,"sources":["editor/schema.ts","editor/actions.ts","editor/plugins.ts","editor/utils/PortalProvider.tsx","editor/nodeviews/Underline.tsx","editor/nodeviews/ReactNodeView.tsx","editor/Editor.tsx","editor/nodeviews/index.ts","pages/FrontPage.tsx","routes.tsx","index.tsx"],"names":["schema","Schema","nodes","doc","content","paragraph","group","attrs","spellcheck","default","parseDOM","tag","toDOM","node","underline","text","splitBlock","state","dispatch","selection","$from","$to","NodeSelection","isBlock","parentOffset","canSplit","pos","tr","split","scrollIntoView","parent","atEnd","size","TextSelection","deleteSelection","deflt","depth","undefined","contentMatchAt","indexAfter","defaultType","types","type","can","mapping","map","isStuff","canReplace","index","Fragment","from","create","setNodeMarkup","before","createParagraphNear","inlineContent","isTextblock","empty","createAndFill","side","childCount","insert","setSelection","createNewUnderline","endOfBlock","end","plugins","push","history","keymap","baseKeymap","PortalProvider","portals","Map","component","container","this","set","ReactDOM","render","delete","unmountComponentAtNode","Underline","props","hole","React","current","appendChild","contentDOM","UnderlinedText","ref","spellCheck","styled","p","ReactNodeView","view","getPos","decorations","portalProvider","reactComponent","dom","document","createElement","classList","add","renderReactComponent","validUpdate","isValidUpdate","sameMarkup","remove","Editor","editorRef","editorState","editorView","EditorState","element","EditorView","nodeViews","fromComponent","applyDevTools","createEditorView","forceUpdate","destroy","Container","id","div","FrontPage","href","Routes","basename","process","exact","path","to","getElementById"],"mappings":"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","file":"static/js/main.35c9f991.chunk.js","sourcesContent":["import { Schema } from 'prosemirror-model'\n\nexport const schema = new Schema({\n  nodes: {\n    doc: {\n      content: 'block+'\n    },\n    paragraph: {\n      group: 'block',\n      content: 'inline*',\n      attrs: {\n        spellcheck: { default: 'false' },\n      },\n      parseDOM: [{ tag: 'p' }],\n      toDOM(node) { return ['p', node.attrs, 0] }\n    },\n    underline: {\n      group: 'block',\n      content: 'inline*',\n      attrs: {\n        spellcheck: { default: 'false' },\n      },\n      parseDOM: [{ tag: 'p' }],\n      toDOM(node) { return ['p', node.attrs, 0] }\n    },\n    text: {\n      group: 'inline'\n    },\n  }\n})\n","import { EditorState, NodeSelection, TextSelection, Transaction\n} from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\nimport { Fragment } from 'prosemirror-model'\n\nimport { schema } from './schema'\n\nexport function splitBlock(state: EditorState, dispatch: (tr: Transaction) => void) {\n  const {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset == $to.parent.content.size\n    const tr = state.tr\n    if (state.selection instanceof TextSelection) tr.deleteSelection()\n    const deflt = $from.depth == 0 ? undefined : $from.node(-1).contentMatchAt($from.indexAfter(-1)).defaultType\n    let types = atEnd && deflt ? [{type: deflt}] : undefined\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && deflt && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can && deflt) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      const isStuff = !atEnd && !$from.parentOffset && $from.parent.type != deflt\n      const canReplace = $from.node(-1).canReplace($from.index(-1), $from.indexAfter(-1), Fragment.from(deflt.create()))\n      if (isStuff && canReplace) {\n        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n      }\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\nexport function createParagraphNear(state: EditorState, dispatch: (tr: Transaction) => void) {\n  let {$from, $to} = state.selection\n  if ($from.parent.inlineContent || $to.parent.inlineContent) return false\n  const type = $from.parent.contentMatchAt($to.indexAfter()).defaultType\n  if (!type || !type.isTextblock) return false\n  const empty = type.createAndFill()\n  debugger\n  if (dispatch && empty) {\n    const side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    const tr = state.tr.insert(side, empty)\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\nexport function createNewUnderline(state: EditorState, dispatch: (tr: Transaction) => void) {\n  const {$from, $to} = state.selection\n  const empty = schema.nodes.underline.createAndFill()\n  const endOfBlock = $from.end()\n  if (empty) {\n    const tr = state.tr.insert(endOfBlock + 1, empty)\n    dispatch(tr)\n  }\n  return false\n}\n","import { Plugin } from 'prosemirror-state'\n\nimport { history } from 'prosemirror-history'\nimport { keymap } from 'prosemirror-keymap'\nimport { baseKeymap } from 'prosemirror-commands'\n\nimport { createNewUnderline, createParagraphNear, splitBlock } from './actions'\n\nexport const plugins = () => {\n  const plugins: Plugin[] = []\n\n  plugins.push(history())\n  plugins.push(keymap(baseKeymap))\n  plugins.push(keymap({\n    'Ctrl-n': createNewUnderline,\n    'Ctrl-p': createParagraphNear,\n    'Ctrl-s': splitBlock,\n  }))\n\n  return plugins\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\n\ntype MountedPortal = {\n  component: React.ReactElement\n}\n\n// Modified from https://bitbucket.org/atlassian/atlaskit-mk-2/src/0fcae893b790443a30f7dadae00638d6e4238b2f/packages/editor/editor-core/src/ui/PortalProvider/index.tsx?at=master\nexport class PortalProvider {\n\n  portals: Map<HTMLElement, MountedPortal> = new Map()\n\n  render(\n    component: React.ReactElement,\n    container: HTMLElement,\n  ) {\n    this.portals.set(container, { component })\n    ReactDOM.render(component, container)\n    // TODO something still wrong with this\n    // ReactDOM.createPortal(\n    //   component,\n    //   container,\n    // )\n  }\n\n  remove(container: HTMLElement) {\n    this.portals.delete(container)\n    ReactDOM.unmountComponentAtNode(container)\n  }\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport interface IUnderlineAttrs {\n  spellcheck: boolean\n}\ninterface IProps {\n  attrs: IUnderlineAttrs\n  contentDOM: HTMLElement\n}\n// Modified from https://gist.github.com/esmevane/7326b19e20a5670954b51ea8618d096d\nexport class Underline extends React.Component<IProps, {}> {\n  hole: React.RefObject<HTMLParagraphElement>\n\n  constructor(props: IProps) {\n    super(props)\n    this.hole = React.createRef()\n  }\n\n  componentDidMount() {\n    this.hole.current!.appendChild(this.props.contentDOM)\n  }\n\n  render() {\n    const { attrs } = this.props\n    return (\n      <UnderlinedText\n        ref={this.hole}\n        spellCheck={attrs.spellcheck}\n      />\n    )\n  }\n}\n\n// The StyledComponent requires some typing I can't be bothered to add to recognize\n// the 'ref' prop.\nconst UnderlinedText: any = styled.p`\n  text-decoration: underline;\n`\n","import * as React from 'react'\nimport { Node } from 'prosemirror-model'\nimport { EditorView, NodeView, Decoration } from 'prosemirror-view'\n\nimport { PortalProvider } from '../utils/PortalProvider'\n\n// Modified from https://bitbucket.org/atlassian/atlaskit-mk-2/src/0fcae893b790443a30f7dadae00638d6e4238b2f/packages/editor/editor-core/src/nodeviews/ReactNodeView.tsx?at=master\nexport class ReactNodeView<T> implements NodeView {\n  dom: HTMLElement\n  contentDOM: HTMLElement\n  ref: React.RefObject<any>\n\n  // All the available parameters that are passed to the NodeView\n  node: Node\n  view: EditorView\n  getPos: (() => number) | boolean\n  decorations: Decoration[]\n  attrs: T\n  // attrs: { [key: string]: string | number}\n\n  portalProvider: PortalProvider\n  reactComponent: React.ComponentType<any>\n\n  constructor(\n    node: Node,\n    view: EditorView,\n    getPos: (() => number) | boolean,\n    decorations: Decoration[],\n    portalProvider: PortalProvider,\n    reactComponent: React.ComponentType<any>,\n  ) {\n    this.attrs = node.attrs as T\n    this.node = node\n    this.view = view\n    this.getPos = getPos\n    this.decorations = decorations\n\n    this.portalProvider = portalProvider\n    this.reactComponent = reactComponent\n\n    this.ref = React.createRef()\n\n    // Here, we'll provide a container to render React into.\n    // Coincidentally, this is where ProseMirror will put its\n    // generated contentDOM.  React will throw out that content\n    // once rendered, and at the same time we'll append it into\n    // the component tree, like a fancy shell game.  This isn't\n    // obvious to the user, but would it be more obvious on an\n    // expensive render?\n    //\n    this.dom = document.createElement('span')\n\n    // Finally, we provide an element to render content into.\n    // We will be moving this node around as we need to.\n    //\n    this.contentDOM = document.createElement('span')\n\n    // Just example classes to help see the structure in the DOM\n    this.dom.classList.add('node__dom')\n    this.contentDOM.classList.add('node__content-dom')\n\n    this.renderReactComponent()\n  }\n\n  renderReactComponent() {\n    this.portalProvider.render(\n      <this.reactComponent ref={this.ref} attrs={this.attrs} contentDOM={this.contentDOM}/>,\n      this.dom\n    )\n  }\n\n  update(\n    node: Node,\n    decorations: Decoration[],\n    validUpdate: (currentNode: Node, newNode: Node) => boolean = () => true,\n  ) {\n    // While quite uncommon, the update must be checked for consistency.\n    // @see https://github.com/ProseMirror/prosemirror/issues/648\n    // The check by default returns true, and in Atlassian editor-core only 'mediaSingle' plugin\n    // uses it for checking 'this.getNodeMediaId'\n    const isValidUpdate =\n      this.node.type === node.type && validUpdate(this.node, node)\n\n    if (!isValidUpdate) {\n      return false\n    }\n    // If the markup has changed, update the React component.\n    // TODO only updates attrs, what about type or marks?\n    // Or well basically just marks, the previous check will return false if type has changed.\n    if (this.ref && !this.node.sameMarkup(node)) {\n      this.attrs = node.attrs as T\n      this.renderReactComponent()\n    }\n    this.node = node\n    this.decorations = decorations\n\n    return true\n  }\n\n  destroy() {\n    this.portalProvider.remove(this.dom)\n  }\n\n  static fromComponent<T>(\n    component: React.ComponentType<any>,\n    portalProvider: PortalProvider,\n  ) {\n    return (\n      node: Node,\n      view: EditorView,\n      getPos: (() => number) | boolean,\n      decorations: Decoration[]\n      ) =>\n      new ReactNodeView<T>(\n        node,\n        view,\n        getPos,\n        decorations,\n        portalProvider,\n        component,\n      )\n  }\n}\n","import * as React from 'react'\nimport applyDevTools from 'prosemirror-dev-tools'\nimport styled from 'styled-components'\n\nimport { EditorState } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\n\nimport { schema } from './schema'\nimport { plugins } from './plugins'\nimport { PortalProvider } from './utils/PortalProvider'\n\nimport { nodeViews } from './nodeviews'\n\nexport class Editor extends React.Component<{}, {}> {\n  editorRef: React.RefObject<any>\n\n  editorState: EditorState\n  editorView?: EditorView\n  portalProvider: PortalProvider\n\n  constructor(props: {}) {\n    super(props)\n    this.editorState = EditorState.create({\n      schema,\n      plugins: plugins(),\n    })\n    this.editorRef = React.createRef()\n    this.portalProvider = new PortalProvider()\n  }\n\n  createEditorView(element: HTMLDivElement | null) {\n    if (element !== null) {\n      this.editorView = new EditorView(element, {\n        nodeViews: nodeViews(this.portalProvider),\n        state: this.editorState,\n      })\n      applyDevTools(this.editorView)\n    }\n  }\n\n  componentDidMount() {\n    this.createEditorView(this.editorRef.current)\n    this.forceUpdate()\n  }\n\n  componentWillUnmount() {\n    if (this.editorView) {\n      this.editorView.destroy()\n    }\n  }\n\n  shouldComponentUpdate() {\n    return false\n  }\n\n  render() {\n    return (\n      <Container>\n        <div id=\"editor\" ref={this.editorRef} />\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  border: 1px solid black;\n  #editor > .ProseMirror {\n    min-height: 140px;\n    overflow-wrap: break-word;\n    outline: none;\n    padding: 10px;\n    white-space: pre-wrap;\n  }\n`\n","import { Underline, IUnderlineAttrs } from './Underline'\n\nimport { ReactNodeView } from './ReactNodeView'\nimport { PortalProvider } from '../utils/PortalProvider'\n\nexport const nodeViews = (portalProvider: PortalProvider) => ({\n  underline: ReactNodeView.fromComponent<IUnderlineAttrs>(Underline, portalProvider),\n})\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nimport { Editor } from '../editor/Editor'\n\nexport class FrontPage extends React.PureComponent {\n  render() {\n    return (\n      <Container>\n        <header>\n          <h1><a href=\"https://teemukoivisto.github.io/prosemirror-react-typescript-example/\">\n            ProseMirror React Typescript Example</a></h1>\n          <p>Demo application to show how to combine ProseMirror with React</p>\n          <p><a href=\"https://teemukoivisto.github.io/prosemirror-react-typescript-example/\">Github repo</a></p>\n        </header>\n        <div>\n          <ul>\n            <li><b>Ctrl + n</b>: New underline paragraph</li>\n            <li><b>Ctrl + p</b>: New normal paragraph (not working)</li>\n            <li><b>Ctrl + s</b>: Split current block</li>\n          </ul>\n          <Editor />\n        </div>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n`\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () : React.ReactElement<any> => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n","import * as React from 'react'\nimport { render } from 'react-dom'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nrender(\n  <Routes />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}