{"version":3,"sources":["editor/schema.ts","editor/actions.ts","editor/plugins.ts","editor/utils/PortalProvider.tsx","editor/nodeviews/Underline.tsx","editor/nodeviews/ReactNodeView.tsx","editor/Editor.tsx","editor/nodeviews/index.ts","pages/FrontPage.tsx","index.tsx","routes.tsx"],"names":["schema","Schema","nodes","doc","content","paragraph","group","attrs","spellcheck","default","parseDOM","tag","toDOM","node","underline","text","splitBlock","state","dispatch","_state$selection","selection","$from","$to","NodeSelection","isBlock","parentOffset","canSplit","pos","tr","split","scrollIntoView","parent","atEnd","size","TextSelection","deleteSelection","deflt","depth","undefined","contentMatchAt","indexAfter","defaultType","types","type","can","mapping","map","isStuff","canReplace","index","Fragment","from","create","setNodeMarkup","before","createParagraphNear","_state$selection2","inlineContent","isTextblock","empty","createAndFill","side","childCount","insert","setSelection","createNewUnderline","_state$selection3","endOfBlock","end","plugins","push","history","keymap","baseKeymap","Ctrl-n","Ctrl-p","Ctrl-s","PortalProvider","Object","classCallCheck","this","portals","Map","createClass","key","value","component","container","set","ReactDOM","render","delete","unmountComponentAtNode","Underline","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","hole","React","inherits","current","appendChild","contentDOM","react","UnderlinedText","ref","spellCheck","styled","p","_templateObject","ReactNodeView","view","getPos","decorations","portalProvider","reactComponent","dom","document","createElement","classList","add","renderReactComponent","validUpdate","arguments","length","sameMarkup","remove","Editor","editorRef","editorState","editorView","EditorState","element","EditorView","nodeViews","fromComponent","applyDevTools","createEditorView","forceUpdate","destroy","Container","id","div","Editor_templateObject","FrontPage","_React$PureComponent","apply","FrontPage_Container","href","Editor_Editor","FrontPage_templateObject","react_router_dom","basename","process","react_router","exact","path","to","getElementById"],"mappings":"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","file":"static/js/main.ba6569ac.chunk.js","sourcesContent":["import { Schema } from 'prosemirror-model'\n\nexport const schema = new Schema({\n  nodes: {\n    doc: {\n      content: 'block+'\n    },\n    paragraph: {\n      group: 'block',\n      content: 'inline*',\n      attrs: {\n        spellcheck: { default: 'false' },\n      },\n      parseDOM: [{ tag: 'p' }],\n      toDOM(node) { return ['p', node.attrs, 0] }\n    },\n    underline: {\n      group: 'block',\n      content: 'inline*',\n      attrs: {\n        spellcheck: { default: 'false' },\n      },\n      parseDOM: [{ tag: 'p' }],\n      toDOM(node) { return ['p', node.attrs, 0] }\n    },\n    text: {\n      group: 'inline'\n    },\n  }\n})\n","import { EditorState, NodeSelection, TextSelection, Transaction\n} from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\nimport { Fragment } from 'prosemirror-model'\n\nimport { schema } from './schema'\n\nexport function splitBlock(state: EditorState, dispatch: (tr: Transaction) => void) {\n  const {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset == $to.parent.content.size\n    const tr = state.tr\n    if (state.selection instanceof TextSelection) tr.deleteSelection()\n    const deflt = $from.depth == 0 ? undefined : $from.node(-1).contentMatchAt($from.indexAfter(-1)).defaultType\n    let types = atEnd && deflt ? [{type: deflt}] : undefined\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && deflt && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can && deflt) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      const isStuff = !atEnd && !$from.parentOffset && $from.parent.type != deflt\n      const canReplace = $from.node(-1).canReplace($from.index(-1), $from.indexAfter(-1), Fragment.from(deflt.create()))\n      if (isStuff && canReplace) {\n        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n      }\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\nexport function createParagraphNear(state: EditorState, dispatch: (tr: Transaction) => void) {\n  let {$from, $to} = state.selection\n  if ($from.parent.inlineContent || $to.parent.inlineContent) return false\n  const type = $from.parent.contentMatchAt($to.indexAfter()).defaultType\n  if (!type || !type.isTextblock) return false\n  const empty = type.createAndFill()\n  debugger\n  if (dispatch && empty) {\n    const side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    const tr = state.tr.insert(side, empty)\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\nexport function createNewUnderline(state: EditorState, dispatch: (tr: Transaction) => void) {\n  const {$from, $to} = state.selection\n  const empty = schema.nodes.underline.createAndFill()\n  const endOfBlock = $from.end()\n  if (empty) {\n    const tr = state.tr.insert(endOfBlock + 1, empty)\n    dispatch(tr)\n  }\n  return false\n}\n","import { Plugin } from 'prosemirror-state'\n\nimport { history } from 'prosemirror-history'\nimport { keymap } from 'prosemirror-keymap'\nimport { baseKeymap } from 'prosemirror-commands'\n\nimport { createNewUnderline, createParagraphNear, splitBlock } from './actions'\n\nexport const plugins = () => {\n  const plugins: Plugin[] = []\n\n  plugins.push(history())\n  plugins.push(keymap(baseKeymap))\n  plugins.push(keymap({\n    'Ctrl-n': createNewUnderline,\n    'Ctrl-p': createParagraphNear,\n    'Ctrl-s': splitBlock,\n  }))\n\n  return plugins\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\n\ntype MountedPortal = {\n  component: React.ReactElement\n}\n\n// Modified from https://bitbucket.org/atlassian/atlaskit-mk-2/src/0fcae893b790443a30f7dadae00638d6e4238b2f/packages/editor/editor-core/src/ui/PortalProvider/index.tsx?at=master\nexport class PortalProvider {\n\n  portals: Map<HTMLElement, MountedPortal> = new Map()\n\n  render(\n    component: React.ReactElement,\n    container: HTMLElement,\n  ) {\n    this.portals.set(container, { component })\n    ReactDOM.render(component, container)\n    // TODO something still wrong with this\n    // ReactDOM.createPortal(\n    //   component,\n    //   container,\n    // )\n  }\n\n  remove(container: HTMLElement) {\n    this.portals.delete(container)\n    ReactDOM.unmountComponentAtNode(container)\n  }\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport interface IUnderlineAttrs {\n  spellcheck: boolean\n}\ninterface IProps {\n  attrs: IUnderlineAttrs\n  contentDOM: HTMLElement\n}\n// Modified from https://gist.github.com/esmevane/7326b19e20a5670954b51ea8618d096d\nexport class Underline extends React.Component<IProps, {}> {\n  hole: React.RefObject<HTMLParagraphElement>\n\n  constructor(props: IProps) {\n    super(props)\n    this.hole = React.createRef()\n  }\n\n  componentDidMount() {\n    this.hole.current!.appendChild(this.props.contentDOM)\n  }\n\n  render() {\n    const { attrs } = this.props\n    return (\n      <UnderlinedText\n        ref={this.hole}\n        spellCheck={attrs.spellcheck}\n      />\n    )\n  }\n}\n\n// The StyledComponent requires some typing I can't be bothered to add to recognize\n// the 'ref' prop.\nconst UnderlinedText: any = styled.p`\n  text-decoration: underline;\n`\n","import * as React from 'react'\nimport { Node } from 'prosemirror-model'\nimport { EditorView, NodeView, Decoration } from 'prosemirror-view'\n\nimport { PortalProvider } from '../utils/PortalProvider'\n\n// Modified from https://bitbucket.org/atlassian/atlaskit-mk-2/src/0fcae893b790443a30f7dadae00638d6e4238b2f/packages/editor/editor-core/src/nodeviews/ReactNodeView.tsx?at=master\nexport class ReactNodeView<T> implements NodeView {\n  dom: HTMLElement\n  contentDOM: HTMLElement\n  ref: React.RefObject<any>\n\n  // All the available parameters that are passed to the NodeView\n  node: Node\n  view: EditorView\n  getPos: () => number\n  decorations: Decoration[]\n  attrs: T\n  // attrs: { [key: string]: string | number}\n\n  portalProvider: PortalProvider\n  reactComponent: React.ComponentType<any>\n\n  constructor(\n    node: Node,\n    view: EditorView,\n    getPos: () => number,\n    decorations: Decoration[],\n    portalProvider: PortalProvider,\n    reactComponent: React.ComponentType<any>,\n  ) {\n    this.attrs = node.attrs as T\n    this.node = node\n    this.view = view\n    this.getPos = getPos\n    this.decorations = decorations\n\n    this.portalProvider = portalProvider\n    this.reactComponent = reactComponent\n\n    this.ref = React.createRef()\n\n    // Here, we'll provide a container to render React into.\n    // Coincidentally, this is where ProseMirror will put its\n    // generated contentDOM.  React will throw out that content\n    // once rendered, and at the same time we'll append it into\n    // the component tree, like a fancy shell game.  This isn't\n    // obvious to the user, but would it be more obvious on an\n    // expensive render?\n    //\n    this.dom = document.createElement('span')\n\n    // Finally, we provide an element to render content into.\n    // We will be moving this node around as we need to.\n    //\n    this.contentDOM = document.createElement('span')\n\n    // Just example classes to help see the structure in the DOM\n    this.dom.classList.add('node__dom')\n    this.contentDOM.classList.add('node__content-dom')\n\n    this.renderReactComponent()\n  }\n\n  renderReactComponent() {\n    this.portalProvider.render(\n      <this.reactComponent ref={this.ref} attrs={this.attrs} contentDOM={this.contentDOM}/>,\n      this.dom\n    )\n  }\n\n  update(\n    node: Node,\n    decorations: Decoration[],\n    validUpdate: (currentNode: Node, newNode: Node) => boolean = () => true,\n  ) {\n    // While quite uncommon, the update must be checked for consistency.\n    // @see https://github.com/ProseMirror/prosemirror/issues/648\n    // The check by default returns true, and in Atlassian editor-core only 'mediaSingle' plugin\n    // uses it for checking 'this.getNodeMediaId'\n    const isValidUpdate =\n      this.node.type === node.type && validUpdate(this.node, node)\n\n    if (!isValidUpdate) {\n      return false\n    }\n    // If the markup has changed, update the React component.\n    // TODO only updates attrs, what about type or marks?\n    // Or well basically just marks, the previous check will return false if type has changed.\n    if (this.ref && !this.node.sameMarkup(node)) {\n      this.attrs = node.attrs as T\n      this.renderReactComponent()\n    }\n    this.node = node\n    this.decorations = decorations\n\n    return true\n  }\n\n  destroy() {\n    this.portalProvider.remove(this.dom)\n  }\n\n  static fromComponent<T>(\n    component: React.ComponentType<any>,\n    portalProvider: PortalProvider,\n  ) {\n    return (\n      node: Node,\n      view: EditorView,\n      getPos: () => number,\n      decorations: Decoration[]\n      ) =>\n      new ReactNodeView<T>(\n        node,\n        view,\n        getPos,\n        decorations,\n        portalProvider,\n        component,\n      )\n  }\n}\n","import * as React from 'react'\nimport applyDevTools from 'prosemirror-dev-tools'\nimport styled from 'styled-components'\n\nimport { EditorState } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\n\nimport { schema } from './schema'\nimport { plugins } from './plugins'\nimport { PortalProvider } from './utils/PortalProvider'\n\nimport { nodeViews } from './nodeviews'\n\nexport class Editor extends React.Component<{}, {}> {\n  editorRef: React.RefObject<any>\n\n  editorState: EditorState\n  editorView?: EditorView\n  portalProvider: PortalProvider\n\n  constructor(props: {}) {\n    super(props)\n    this.editorState = EditorState.create({\n      schema,\n      plugins: plugins(),\n    })\n    this.editorRef = React.createRef()\n    this.portalProvider = new PortalProvider()\n  }\n\n  createEditorView(element: HTMLDivElement | null) {\n    if (element !== null) {\n      this.editorView = new EditorView(element, {\n        nodeViews: nodeViews(this.portalProvider),\n        state: this.editorState,\n      })\n      applyDevTools(this.editorView)\n    }\n  }\n\n  componentDidMount() {\n    this.createEditorView(this.editorRef.current)\n    this.forceUpdate()\n  }\n\n  componentWillUnmount() {\n    if (this.editorView) {\n      this.editorView.destroy()\n    }\n  }\n\n  shouldComponentUpdate() {\n    return false\n  }\n\n  render() {\n    return (\n      <Container>\n        <div id=\"editor\" ref={this.editorRef} />\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  border: 1px solid black;\n  #editor > .ProseMirror {\n    min-height: 140px;\n    overflow-wrap: break-word;\n    outline: none;\n    padding: 10px;\n    white-space: pre-wrap;\n  }\n`\n","import { Underline, IUnderlineAttrs } from './Underline'\n\nimport { ReactNodeView } from './ReactNodeView'\nimport { PortalProvider } from '../utils/PortalProvider'\n\nexport const nodeViews = (portalProvider: PortalProvider) => ({\n  underline: ReactNodeView.fromComponent<IUnderlineAttrs>(Underline, portalProvider),\n})\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nimport { Editor } from '../editor/Editor'\n\nexport class FrontPage extends React.PureComponent {\n  render() {\n    return (\n      <Container>\n        <header>\n          <h1><a href=\"https://teemukoivisto.github.io/prosemirror-react-typescript-example/\">\n            ProseMirror React Typescript Example</a></h1>\n          <p>Demo application to show how to combine ProseMirror with React</p>\n          <p><a href=\"https://teemukoivisto.github.io/prosemirror-react-typescript-example/\">Github repo</a></p>\n        </header>\n        <div>\n          <ul>\n            <li><b>Ctrl + n</b>: New underline paragraph</li>\n            <li><b>Ctrl + p</b>: New normal paragraph (not working)</li>\n            <li><b>Ctrl + s</b>: Split current block</li>\n          </ul>\n          <Editor />\n        </div>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n`\n","import * as React from 'react'\nimport { render } from 'react-dom'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nrender(\n  <Routes />,\n  document.getElementById('root')\n)\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () : React.ReactElement<any> => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n"],"sourceRoot":""}